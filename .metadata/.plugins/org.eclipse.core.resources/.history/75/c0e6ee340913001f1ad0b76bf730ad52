import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import java.awt.GridLayout;
import javax.swing.JTextField;

import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import java.awt.Dimension;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JComboBox;

public class stockFrame extends JFrame{
	Connection conn=null;
	PreparedStatement state=null;
	ResultSet result=null;
	// помощни променливи за проследяване на id-тата на отделните номенкалтури
	int id=-1;
	int idpr=-1;
	int idsup=-1;
	int idspr=-1;

	//общ таб панел
	JTabbedPane tab=new JTabbedPane();

	//ТАБЛИЦА ПОРЪЧКИ
	//Основен панел за поръчки
	JPanel stockPanel=new JPanel();
	
	//подпанели за поръчки
	JPanel stockPanel1=new JPanel();
	JPanel stockPanel2=new JPanel();
	JPanel stockPanel3=new JPanel();
		
	//етикети
	JLabel orderIDL=new JLabel("Поръчка:");
	JLabel productsL=new JLabel("Продукт:");
	JLabel supplierL=new JLabel("Доставчик:");
	JLabel quantityL=new JLabel("Количество:");
	JLabel statusL=new JLabel("Статус:");
	JLabel orderDateL=new JLabel("Дата:");
	
	private static final long serialVersionUID = 4L;
	
	//текстови полета за въвеждане
	JTextField orderIDTF=new JTextField();
	JTextField productsTF=new JTextField();
	JTextField supplierTF=new JTextField();
	JTextField quantityTF=new JTextField();
	JTextField statusTF=new JTextField();
	JTextField orderDateTF=new JTextField();
	
	//комбобокс за номенклатурите
	JComboBox<String> comboOrd=new JComboBox<String>();
	JComboBox<String> comboPr=new JComboBox<String>();
	JComboBox<String> comboS=new JComboBox<String>();
	
	//бутони за панела поръчки
	JButton BAdd=new JButton("Добави");
	JButton BDel=new JButton("Изтрий");
	JButton BEdit=new JButton("Промени");
	
	//таблица+скроол за визуализация
	JTable orderTable=new JTable();
	JScrollPane orderScroll=new JScrollPane(orderTable);
	
	//ТАБЛИЦА ПРОДУКТИ
		//етикет
		JLabel productIDL=new JLabel("Продукти:");
		JLabel nameL=new JLabel("Име:");
		JLabel descriptionL=new JLabel("Описание:");
		JLabel priceL=new JLabel("Цена:");
		JLabel prquantityL=new JLabel("Количество:");

		//текстово поле за въвеждане
		JTextField productIDTF=new JTextField();
		JTextField nameTF =new JTextField();
		JTextField descriptionTF=new JTextField();
		JTextField priceTF=new JTextField();
		JTextField prquantityTF=new JTextField();

		//основен панел
		JPanel prPanel=new JPanel();
		//подпанели
		JPanel prPanel1=new JPanel();
		JPanel prPanel2=new JPanel();
		JPanel prPanel3=new JPanel();

		//бутони за продукти
		JButton PrAdd=new JButton("Добави");
		JButton PrDel=new JButton("Изтрий");
		JButton PrEdit=new JButton("Промени");
		
		//таблица+скроол за продукти
		JTable prTable=new JTable();
		JScrollPane prScroll=new JScrollPane(prTable);

	//ТАБЛИЦА ДОСТАВЧИК
	//етикет
	JLabel supplierIDL=new JLabel("Доставчик:");
	JLabel supNameL=new JLabel("Име:");
	JLabel contactInfoL=new JLabel("Контакти:");
	
	
	//текстови полета за въвеждане
	JTextField supplierIDTF =new JTextField();
	JTextField supNameTF=new JTextField();
	JTextField contactInfoTF=new JTextField();
	
	//основен панел за доставчик
	JPanel supPanel=new JPanel();
	//подпанели
	JPanel supPanel1=new JPanel();
	JPanel supPanel2=new JPanel();
	JPanel supPanel3=new JPanel();

	//бутони за панела поръчки
	JButton supAdd=new JButton("Добави");
	JButton supDel=new JButton("Изтрий");
	JButton supEdit=new JButton("Промени");
	
	//таблица+скроол за доставчик
	JTable supTable=new JTable();
	JScrollPane supScroll=new JScrollPane(supTable);
	
	//таб СПРАВКА: по дата на поръчка, по цена на продукт, по име на доставчик
		//етикет за дата
		JLabel sprOrdDateL=new JLabel("Въведете дата на поръчката:");
		//текстово поле за въвеждане
		JTextField sprOrdDateTF=new JTextField();
		//етикет за цена
		JLabel sprPriceL=new JLabel("Въведете цена на продукт:");
		//текстово поле за въвеждане
		JTextField sprPriceTF=new JTextField();
		//етикет за име
		JLabel sprNameL=new JLabel("Въведете име на доставчик:");
		//текстово поле за въвеждане
		JTextField sprNameTF=new JTextField();

		//основен панел
		JPanel sprPanel=new JPanel();
		//подпанели
		JPanel sprPanel1=new JPanel();
		JPanel sprPanel2=new JPanel();
		JPanel sprPanel3=new JPanel();

		//бутони за поръчка
		JButton sOrdSearch=new JButton("Търси");
		//JButton sPrDel=new JButton("Изтрий");
		//JButton sPrEdit=new JButton("Промени");
		//бутони за поръчка
		JButton sPrSearch=new JButton("Търси");
		//JButton sPrDel=new JButton("Изтрий");
		//JButton sPrEdit=new JButton("Промени");
		//бутони за поръчка
		JButton sSupSearch=new JButton("Търси");
		//JButton sPrDel=new JButton("Изтрий");
		//JButton sPrEdit=new JButton("Промени");
				
		//таблица+скроол за за справката
		JTable sprTable=new JTable();
		JScrollPane sprScroll=new JScrollPane(sprTable);

	

public stockFrame() {
		
		conn=MyDBConnection.getConnection();

		this.setSize(600, 720);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setTitle("Складова система");
		
		// ТАБЛИЦА ПОРЪЧКИ
		tab.add(stockPanel,"Поръчки");
		stockPanel.setLayout(new GridLayout(3,1));
		
		//първи подпанел
		stockPanel.add(stockPanel1);

		stockPanel1.setLayout(new GridLayout(7,2));
		stockPanel1.add(orderIDL);stockPanel1.add(orderIDTF);
		stockPanel1.add(productIDL);stockPanel1.add(comboPr);
		stockPanel1.add(supplierIDL);stockPanel1.add(comboS);
		stockPanel1.add(quantityL);stockPanel1.add(quantityTF);
		stockPanel1.add(statusL);stockPanel1.add(statusTF);
		stockPanel1.add(orderDateL);stockPanel1.add(orderDateTF);

		//втори подпанел за бутоните
		stockPanel.add(stockPanel2);
		stockPanel2.add(BAdd);stockPanel2.add(BDel);stockPanel2.add(BEdit);
		
		// БУТОНИ 
		BAdd.addActionListener(new AddStockDB());
		BDel.addActionListener(new DelStockDB());
		BEdit.addActionListener(new EditStockDB());
		
		stockPanel.add(stockPanel3);
		orderScroll.setPreferredSize(new Dimension(550, 200));
		stockPanel3.add(orderScroll);
		
	
		//ТАБЛИЦА ПРОДУКТИ
		tab.add(prPanel,"Продукти");
		prPanel.setLayout(new GridLayout(3,1));
		prPanel.add(prPanel1);

		//prPanel1.setLayout(new GridLayout(1,2));
		//prPanel1.setLayout(new FlowLayout(FlowLayout.LEFT));
		prPanel1.add(productIDL);prPanel1.add(productIDTF);
		prPanel1.add(nameL);prPanel1.add(nameTF);
		prPanel1.add(descriptionL);prPanel1.add(descriptionTF);
		prPanel1.add(priceL);prPanel1.add(priceTF);
		prPanel1.add(quantityL);prPanel1.add(quantityTF);
		productIDTF.setPreferredSize(new Dimension(450,30));

		prPanel.add(prPanel2);
		prPanel2.add(PrAdd);prPanel2.add(PrDel);prPanel2.add(PrEdit);
		
		// БУТОНИ 
		PrAdd.addActionListener(new AddPrDB());
		PrDel.addActionListener(new DelPrDB());
		PrEdit.addActionListener(new EditPrDB());
		
		prPanel.add(prPanel3);
		prScroll.setPreferredSize(new Dimension(550, 200));
		prPanel3.add(prScroll);
		
		//ТАБЛИЦА ДОСТАВЧИК
		tab.add(supPanel,"Доставчик");
		supPanel.setLayout(new GridLayout(3,1));
		supPanel.add(supPanel1);

		supPanel1.add(supplierIDL);supPanel1.add(supplierIDTF);
		supplierIDTF.setPreferredSize(new Dimension(450,30));

		supPanel.add(supPanel2);
		supPanel2.add(supAdd);supPanel2.add(supDel);supPanel2.add(supEdit);
		
		// БУТОНИ 
		supAdd.addActionListener(new AddSupDB());
		supDel.addActionListener(new DelSupDB());
		supEdit.addActionListener(new EditSupDB());
		
		supPanel.add(supPanel3);
		supScroll.setPreferredSize(new Dimension(550, 200));
		supPanel3.add(supScroll);
		
		//ТАБЛИЦА СПРАВКА
		tab.add(sprPanel,"Справка");
		sprPanel.setLayout(new GridLayout(3,1));
		sprPanel.add(sprPanel1);

		sprPanel1.add(sprOrdDateL);
		sprPanel1.add(sprOrdDateTF);
		sprOrdDateTF.setPreferredSize(new Dimension(450,30));
		
		sprPanel1.add(sprPriceL);
		sprPanel1.add(sprPriceTF);
		sprPriceTF.setPreferredSize(new Dimension(450,30));
		
		sprPanel1.add(sprNameL);
		sprPanel1.add(sprNameTF);
		sprNameTF.setPreferredSize(new Dimension(450,30));

		sprPanel.add(sprPanel2);
		sprPanel2.add(sPrSearch);
				
		// БУТОНИ 
		sPrSearch.addActionListener(new SearchDB());
				
		sprPanel.add(sprPanel3);
		sprScroll.setPreferredSize(new Dimension(550, 200));
		sprPanel3.add(sprScroll);
		

		this.add(tab);
		this.setVisible(true);
		this.refreshOrdTable(); // вариант без параметри
		this.refreshComboPr();
		this.refreshComboS();
		this.refreshPrTable("PRTABLE", prTable); // вариант с параметри
		this.refreshSTable("STABLE", supTable); // вариант с параметри
		
		//обработка на мишката в таблиците за визуализация
		orderTable.addMouseListener(new MouseActionOrdTable());
		prTable.addMouseListener(new MouseActionPrTable());
		supTable.addMouseListener(new MouseActionSupTable());
		
		comboPr.addActionListener(new ActionListener() {
			
			//събитието обслужва комбобокса за продукти само ако е отворен първия таб
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				//System.out.println(idpr);
				if(tab.getSelectedIndex()==0 && idpr>0) {
					//if(idpr>0 || !comboPr.getSelectedItem().toString().isEmpty()) {
					String str="select * from prtable where name='"+comboPr.getSelectedItem().toString()+"'";
					try {
						state=conn.prepareStatement(str);
						result=state.executeQuery();
						result.next();
						idpr=Integer.parseInt(result.getObject(1).toString());
					} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					}

					System.out.println(comboPr.getSelectedItem().toString());
					System.out.println(str);
					System.out.println(idpr);
				}
			//	} 
			}
		});

		comboS.addActionListener(new ActionListener() {
			
			//събитието обслужва комбобокса за доставчик само ако е отворен първия таб
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				if(tab.getSelectedIndex()==0 && idsup>0) {
					
					String str="select * from stable where suptab='"+comboS.getSelectedItem().toString()+"'";
					try {
						state=conn.prepareStatement(str);
						result=state.executeQuery();
						result.next();
						idsup=Integer.parseInt(result.getObject(1).toString());
					} catch (SQLException e1) {
					// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					System.out.println(comboS.getSelectedItem().toString());
					System.out.println(str);
					System.out.println(idsup);
				}

			}
		});

	}

// актуализира изгледа с таблицата за налични поръчки в съответния таб
public void refreshOrdTable() {
	//conn=MyDBConnection.getConnection();
	String str="";
	str="select ORDERS.order_id, quantity, order_date, status,"
			+ "SUPPLIERS.supplier_id, name, contact_info,"
			+ "PRODUCTS.product_id, name, description, price, quantity "
			+ "where ORDERS.supplier_id=SUPPLIERS.supplier_id "
			+ "and ORDERS.product_id=PRODUCTS.product_id";
	try {
		state=conn.prepareStatement(str);
		result=state.executeQuery();
		orderTable.setModel(new MyTModel(result));
		
		orderTable.getColumnModel().getColumn(3).setMinWidth(0);
		orderTable.getColumnModel().getColumn(3).setMaxWidth(0);
		orderTable.getColumnModel().getColumn(3).setWidth(0);

		orderTable.getColumnModel().getColumn(5).setMinWidth(0);
		orderTable.getColumnModel().getColumn(5).setMaxWidth(0);
		orderTable.getColumnModel().getColumn(5).setWidth(0);

	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}

	// актуализира изгледа с таблицата за налични продукти в съответния таб
	public void refreshPrTable() {
		//conn=MyDBConnection.getConnection();
		String str="";
		str="select PRTABLE.productID, name, description, price, "
				+ "quantity, SUPTABLE.supplierID, name, , , , , ,MTABLE,PRTABLE where ARTTABLE.idmashtab=MTABLE.id and ARTTABLE.idproizvoditel=PRTABLE.id";
		try {
			state=conn.prepareStatement(str);
			result=state.executeQuery();
			prTable.setModel(new MyTModel(result));
			
			prTable.getColumnModel().getColumn(3).setMinWidth(0);
			prTable.getColumnModel().getColumn(3).setMaxWidth(0);
			prTable.getColumnModel().getColumn(3).setWidth(0);

			prTable.getColumnModel().getColumn(5).setMinWidth(0);
			prTable.getColumnModel().getColumn(5).setMaxWidth(0);
			prTable.getColumnModel().getColumn(5).setWidth(0);

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// актуализира изгледа с таблицата за поръчки в съответния таб
		public void refreshOrdTable(String name, JTable table) {
			//conn=MyDBConnection.getConnection();
			String str="select * from "+name;
			try {
				state=conn.prepareStatement(str);
				result=state.executeQuery();
				table.setModel(new MyTModel(result));
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	// актуализира изгледа с таблицата за продукти в съответния таб
	public void refreshPrTable(String name, JTable table) {
		//conn=MyDBConnection.getConnection();
		String str="select * from "+name;
		try {
			state=conn.prepareStatement(str);
			result=state.executeQuery();
			table.setModel(new MyTModel(result));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// актуализира изгледа с таблицата за доставчик в съответния таб
	public void refreshSTable(String name, JTable table) {
		//conn=MyDBConnection.getConnection();
		String str="select * from "+name;
		try {
			state=conn.prepareStatement(str);
			result=state.executeQuery();
			table.setModel(new MyTModel(result));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	// презарежда комбо кутията от таблицата за поръчки
		public void refreshComboOrd() {
			
			id=-1;
			comboOrd.removeAllItems();
			
			String sql="select ORDER_ID, name from ORDERS";
			//conn=DBConnection.getConnection();
			String item="";
			
			try {
				state=conn.prepareStatement(sql);
				result=state.executeQuery();
				if(result.next()) {
					id=Integer.parseInt(result.getObject(1).toString());
					do{
						item=result.getObject(2).toString();
						comboOrd.addItem(item);
					}while(result.next());
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	// презарежда комбо кутията от таблицата за продукти
	public void refreshComboPr() {
		
		idpr=-1;
		comboPr.removeAllItems();
		
		String sql="select product_id, name from PRODUCTS";
		//conn=DBConnection.getConnection();
		String item="";
		
		try {
			state=conn.prepareStatement(sql);
			result=state.executeQuery();
			if(result.next()) {
				idpr=Integer.parseInt(result.getObject(1).toString());
				do{
					item=result.getObject(2).toString();
					comboPr.addItem(item);
				}while(result.next());
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	// презарежда комбо кутията от таблицата за доставчик
	public void refreshComboS() {
		
		idsup=-1;
		comboS.removeAllItems();
		
		String sql="select supplier_id, name from SUPPLIERS";
		//conn=DBConnection.getConnection();
		String item="";
		
		try {
			state=conn.prepareStatement(sql);
			result=state.executeQuery();
			if(result.next()) {
				idsup=Integer.parseInt(result.getObject(1).toString());
				do {
					item=result.getObject(2).toString();
					comboS.addItem(item);
				}while(result.next());
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// обслужва бутона "Добавяне" за въведена поръчка
	class AddStockDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(!orderIDTF.getText().isEmpty()) {
				String sql="insert into orders values(null,?,?,?,?,?,?,CURDATE(),?)";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(orderIDTF.getText()));
					state.setInt(2, idpr);
					state.setInt(3, idsup);
					state.setString(4, quantityTF.getText());
					state.setString(5, orderDateTF.getText());
					state.setString(6, statusTF.getText());
					state.execute();
					refreshOrdTable();
					
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				quantityTF.setText("");
				statusTF.setText("");
				id=-1;
			}
		}
	}
	// обслужва бутона "Изтриване" за въведена поръчка
	class DelStockDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if (id>0) {
				String sql="delete from ORDERS where order_id=?";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(orderIDTF.getText()));
					state.execute();
					refreshOrdTable();
				
				} catch (SQLException e1) {
				// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				quantityTF.setText("");
				statusTF.setText("");
				id=-1;
			}
		}
	}
	// обслужва бутона "Промени" за въведена поръчка
	class EditStockDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(id>0) {
				String sql="update ORDERS set order_id=?, product_id=?, supplier_id=?, quantity=?, order_date=?, status=? where order_id=?";
			
				try {
					state=conn.prepareStatement(sql);
					
					state.setInt(1, Integer.parseInt(orderIDTF.getText()));
					state.setInt(2, idpr);
					state.setInt(3, idsup);
					state.setString(4, quantityTF.getText());
					state.setString(5, orderDateTF.getText());
					state.setString(6, statusTF.getText());
					state.setInt(7, id);
					state.execute();
					
					refreshOrdTable();
				
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				quantityTF.setText("");
				statusTF.setText("");
			}
			
		}
	}
	// обслужва бутона "Добавяне" за продукти
	class AddPrDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(!productIDTF.getText().isEmpty()) {
				String sql="insert into PRODUCTS values(null,?)";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(productIDTF.getText()));
					state.execute();
					
					refreshPrTable("PRODUCTS", prTable);
					refreshComboPr();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				productIDTF.setText("");
			}
		}
	}
	// обслужва бутона "Изтриване" за продукти
	class DelPrDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if (idpr>0) {
				String sql="delete from PRODUCTS where product_id=?";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(productIDTF.getText()));
					state.execute();
					refreshPrTable("PRODUCTS", prTable);
					refreshComboPr();
					//idpr=-1;
				
				} catch (SQLException e1) {
				// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				productIDTF.setText("");
			}
		}
	}
	// обслужва бутона "Промени" за продукти
	class EditPrDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(idpr>0) {
				String sql="update products set name=? where product_id=?";
			
				try {
					state=conn.prepareStatement(sql);
					state.setString(1, nameTF.getText());
					state.setInt(2, Integer.parseInt(productIDTF.getText()));
					state.execute();
					refreshPrTable("PRODUCTS", prTable);
					refreshComboPr();
				
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				nameTF.setText("");
			}
			
		}
	}
	// обслужва бутона "Добавяне" за доставчик
	class AddSupDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(!supplierIDTF.getText().isEmpty()) {
				String sql="insert into suppliers values(null,?)";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(supplierIDTF.getText()));
					state.execute();
					refreshSTable("SUPPLIERS", supTable);
					refreshComboS();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				supplierIDTF.setText("");
			}
		}
	}
	// обслужва бутона "Изтриване" за доставчик
	class DelSupDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if (idsup>0) {
				String sql="delete from suppliers where supplier_id=?";
				try {
					state=conn.prepareStatement(sql);
					state.setInt(1, Integer.parseInt(supplierIDTF.getText()));
					state.execute();
					refreshSTable("SUPPLIERS", supTable);
					refreshComboS();
				
				} catch (SQLException e1) {
				// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
				supplierIDTF.setText("");
			}
		}
	}
	// обслужва бутона "Промени" за доставчик
	class EditSupDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			if(idsup>0) {
				String sql="update suppliers set name=? where supplier_id=?";
			
				try {
					state=conn.prepareStatement(sql);
					state.setString(1, supNameTF.getText());
					state.setInt(2, Integer.parseInt(supplierIDTF.getText()));
					state.execute();
					refreshSTable("SUPPLIERS", supTable);
					refreshComboS();
				
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				supNameTF.setText("");
			}
			
		}
	}
	class MouseActionOrdTable implements MouseListener{

		// обслужва кликването върху ред от таблицата с въведените поръчки
		@Override
		public void mouseClicked(MouseEvent e) {
			
			int row=orderTable.getSelectedRow();
			
			// зареждане на актуалното id за налични поръчки	
			id=Integer.parseInt(orderTable.getValueAt(row, 0).toString());
			
			orderIDTF.setText(orderTable.getValueAt(row, 1).toString());
			productsTF.setText(orderTable.getValueAt(row, 6).toString());
			supplierTF.setText(orderTable.getValueAt(row, 7).toString());
			quantityTF.setText(orderTable.getValueAt(row, 8).toString());
			orderDateTF.setText(orderTable.getValueAt(row, 10).toString());
			statusTF.setText(orderTable.getValueAt(row, 11).toString());
			
			// зареждане на актуалния текст в комбобокса за продукт
			comboPr.setSelectedItem(orderTable.getValueAt(row, 2).toString());
			// зареждане на актуалното id за продукт
			idpr=Integer.parseInt(orderTable.getValueAt(row, 3).toString());
			
			// зареждане на актуалния текст в комбобокса за доставчик
			comboS.setSelectedItem(orderTable.getValueAt(row, 4).toString());
			// зареждане на актуалното id за доставчик
			idsup=Integer.parseInt(orderTable.getValueAt(row, 5).toString());
		
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
	}
	class MouseActionPrTable implements MouseListener{

		// обслужва кликването върху ред от таблицата с продукти
		@Override
		public void mouseClicked(MouseEvent e) {
			int row=prTable.getSelectedRow();
			idpr=Integer.parseInt(prTable.getValueAt(row, 0).toString());
			
			productIDTF.setText(prTable.getValueAt(row, 1).toString());
		
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
	}
	class MouseActionSupTable implements MouseListener{

		// обслужва кликването върху ред от таблицата с доставчик
		@Override
		public void mouseClicked(MouseEvent e) {
			int row=supTable.getSelectedRow();
			idsup=Integer.parseInt(supTable.getValueAt(row, 0).toString());
			
			supNameTF.setText(supTable.getValueAt(row, 1).toString());
		
			
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
	}
	
	//клас за обслужване на бутона търсене за справката
	class SearchDB implements ActionListener {
		public void actionPerformed (ActionEvent arg0) {
//			conn=DBConnection.getConnection();
			// if проверяват и отхвърлят празно текстово поле
			if(!sprOrdDateTF.getText().isEmpty()) {
				if(Double.parseDouble(sprOrdDateTF.getText())>0) {
			
					String str="select ORDERS.order_id, "
							+ "PRODUCTS.product_id, name, price"
							+ "SUPPLIERS.supplier_id, name, quantity, order_date, status"
							+ "from ORDERS,PRODUCTS,SUPPLIERS "
							+ "where ORDERS.product_id=PRODUCTS.product_id "
							+ "and ORDERS.supplier_id=SUPPLIERS.supplier "
							+ "and PRODUCTS.price<="+Double.parseDouble(sprOrdDateTF.getText());
					try {
						state=conn.prepareStatement(str);
						result=state.executeQuery();
						sprTable.setModel(new MyTModel(result));
				
						sprTable.getColumnModel().getColumn(3).setMinWidth(0);
						sprTable.getColumnModel().getColumn(3).setMaxWidth(0);
						sprTable.getColumnModel().getColumn(3).setWidth(0);

						sprTable.getColumnModel().getColumn(5).setMinWidth(0);
						sprTable.getColumnModel().getColumn(5).setMaxWidth(0);
						sprTable.getColumnModel().getColumn(5).setWidth(0);
			
					} catch (SQLException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					sprOrdDateTF.setText("");
				}
			}
		}

	}
}


